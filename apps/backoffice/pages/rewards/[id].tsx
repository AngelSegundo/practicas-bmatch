import Head from "next/head";
import { LoadingBar } from "ui";
import { useEffect } from "react";
import Layout from "../../components/Layout";
import router from "next/router";
import Spinner from "ui/Spinner";
import { Reward } from "domain/entities";
import { useLazyGetCommunitiesBySponsorIdQuery } from "../../store/services/community";
import {
  useGetRewardByIdQuery,
  useUpdateRewardMutation,
} from "../../store/services/reward";
import DetailReward from "../../components/DetailReward";
import { showAlert } from "../../store/slices/notifications";
import { useAppDispatch } from "../../store/root";

export default function RewardIdPage() {
  const id = router.query.id as string;
  const { data: rewardData, isLoading: isRewardLoading } =
    useGetRewardByIdQuery(id);
  const dispatch = useAppDispatch();
  const [getCommunities] = useLazyGetCommunitiesBySponsorIdQuery();

  useEffect(() => {
    if (isRewardLoading) return;
    if (!isRewardLoading && rewardData) {
      getCommunities(rewardData.id);
    }
  }, [isRewardLoading, rewardData]);

  const [
    updateReward,
    { data: updatedRewardData, isLoading: isUpdatedRewardLoading },
  ] = useUpdateRewardMutation();
  const onUpdateReward = async (rewardInfo: {
    reward: Reward;
    picture: File | null;
  }) => {
    const data = {
      title: rewardInfo.reward.title,
      subtitle: rewardInfo.reward.subtitle,
      description: rewardInfo.reward.description,
      type: rewardInfo.reward?.type,
      discount: rewardInfo.reward?.discount,
      expirationDate: rewardInfo.reward?.expirationDate,
      schedule: rewardInfo.reward?.schedule,
      provider: rewardInfo.reward?.provider,
      countryId: rewardInfo.reward?.countryId,
      isActive: rewardInfo.reward.isActive,
      code: rewardInfo.reward.code,
    };
    if (rewardData) {
      await updateReward({
        id: rewardData.id,
        data: data,
      }).unwrap();
    }
  };
  useEffect(() => {
    if (isUpdatedRewardLoading) return;
    if (!isUpdatedRewardLoading && updatedRewardData) {
      dispatch(
        showAlert({
          template: "success",
          text: "The reward has been updated",
        })
      );
    }
  }, [updatedRewardData, isUpdatedRewardLoading]);

  return (
    <div>
      {isRewardLoading ? (
        <div className="flex-1 flex items-center justify-center h-screen">
          <div className="grid grid-rows-2 justify-items-center px-5 py-5 shadow-md rounded-md bg-white w-fit h-28">
            <Spinner />
            <h6 className="text-sm leading-5 font-normal">Loading Reward</h6>
          </div>
        </div>
      ) : (
        <div className="flex flex-1 flex-col items-start justify-start bg-gray-50 w-full h-screen">
          <Head>
            <title>Bmatch - dev</title>
            <meta name="description" content="Generated by create next app" />
            <link rel="icon" href="/favicon.ico" />
          </Head>
          {rewardData ? (
            <div className="w-full pt-4 flex flex-col flex-1">
              <div className="flex px-8 justify-between h-10">
                <div className="flex items-end w-full space-x-3">
                  <h1 className="text-xl leading-8 font-semibold">
                    {rewardData?.title}
                  </h1>
                </div>
              </div>
              <div className="flex flex-col w-full text-sm text-gray-500 leading-8 font-semibold space-x-2">
                <DetailReward
                  reward={rewardData}
                  onSubmitReward={onUpdateReward}
                />
              </div>
            </div>
          ) : (
            <LoadingBar />
          )}
        </div>
      )}
    </div>
  );
}

RewardIdPage.getLayout = (page: JSX.Element) => {
  return <Layout>{page}</Layout>;
};
