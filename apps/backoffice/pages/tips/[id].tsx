import Head from "next/head";
import { LoadingBar } from "ui";
import { useEffect } from "react";
import Layout from "../../components/Layout";
import router from "next/router";
import Spinner from "ui/Spinner";
import { useLazyGetCommunitiesBySponsorIdQuery } from "../../store/services/community";
import {
  useGetTipByIdQuery,
  useUpdateTipMutation,
  useUpdateImageMutation,
} from "../../store/services/tip";
import DetailTip from "../../components/DetailTip";
import { showAlert } from "../../store/slices/notifications";
import { useAppDispatch } from "../../store/root";
import { Tip } from "domain/entities";

export default function TipIdPage() {
  const id = router.query.id as string;
  const { data: tipData, isLoading: isTipLoading } = useGetTipByIdQuery(id);
  const dispatch = useAppDispatch();
  const [getCommunities] = useLazyGetCommunitiesBySponsorIdQuery();
  const [updateImage] = useUpdateImageMutation();

  useEffect(() => {
    if (isTipLoading) return;
    if (!isTipLoading && tipData) {
      getCommunities(tipData.id);
    }
  }, [isTipLoading, tipData]);

  const [updateTip, { data: updatedTipData, isLoading: isUpdatedTipLoading }] =
    useUpdateTipMutation();
  const onUpdateTip = async (data: { tip: Tip; image: File | null }) => {
    await updateTip({ id, data: data.tip }).unwrap();
    if (data.image) {
      const formData = new FormData();
      formData.append("image", data.image);
      await updateImage({
        id: id,
        data: formData,
      }).unwrap();
    }
    // if (tipData) {
    //   await updateTip({
    //     id: tipData.id,
    //     data: data,
    //   }).unwrap();
    //   router.push("/tips");
    // }
  };
  useEffect(() => {
    if (isUpdatedTipLoading) return;
    if (!isUpdatedTipLoading && updatedTipData) {
      dispatch(
        showAlert({
          template: "success",
          text: "The tip has been updated",
        })
      );
    }
  }, [updatedTipData, isUpdatedTipLoading]);

  return (
    <div>
      {isTipLoading ? (
        <div className="flex-1 flex items-center justify-center h-screen">
          <div className="grid grid-rows-2 justify-items-center px-5 py-5 shadow-md rounded-md bg-white w-fit h-28">
            <Spinner />
            <h6 className="text-sm leading-5 font-normal">Loading Tip</h6>
          </div>
        </div>
      ) : (
        <div className="flex flex-1 flex-col items-start justify-start bg-gray-50 w-full h-screen">
          <Head>
            <title>Bmatch - dev</title>
            <meta name="description" content="Generated by create next app" />
            <link rel="icon" href="/favicon.ico" />
          </Head>
          {tipData ? (
            <div className="w-full pt-4 flex flex-col flex-1">
              <div className="flex px-8 justify-between h-10">
                <div className="flex items-end w-full space-x-3">
                  <h1 className="text-xl leading-8 font-semibold">
                    {tipData?.id}
                  </h1>
                </div>
              </div>
              <div className="flex flex-col w-full text-sm text-gray-500 leading-8 font-semibold space-x-2">
                <DetailTip tip={tipData} onSubmitTip={onUpdateTip} />
              </div>
            </div>
          ) : (
            <LoadingBar />
          )}
        </div>
      )}
    </div>
  );
}

TipIdPage.getLayout = (page: JSX.Element) => {
  return <Layout>{page}</Layout>;
};
