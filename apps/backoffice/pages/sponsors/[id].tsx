import Head from "next/head";
import { Tab, LoadingBar } from "ui";
import { useEffect, useMemo, useState } from "react";
import Layout from "../../components/Layout";
import router from "next/router";
import {
  useGetSponsorByIdQuery,
  useUpdateSponsorMutation,
} from "../../store/services/sponsor";
import Spinner from "ui/Spinner";
import { Sponsor } from "domain/entities";
import UsersTable from "../../components/tables/UsersTable";
import { useLazyGetCommunitiesBySponsorIdQuery } from "../../store/services/community";
import CommunitiesTable from "../../components/tables/CommunitiesTable";
import { useGetCountriesQuery } from "../../store/services/country";
import PendingInvitationTable from "../../components/tables/PendingInvitationTable";
import {
  useLazyGetInvitationsBySponsorIdQuery,
  useLazyGetUsersBySponsorIdQuery,
} from "../../store/services/user";
import DetailSponsorForm from "../../components/DetailSponsorForm";

export default function SponsorIdPage() {
  const [currentTab, setCurrentTab] = useState("Users" as string);
  const id = router.query.id as string;
  const { data: sponsorData, isLoading: isSponsorLoading } =
    useGetSponsorByIdQuery(id);

  const [
    getCommunities,
    { data: communities, isLoading: isCommunitiesLoading },
  ] = useLazyGetCommunitiesBySponsorIdQuery();

  useEffect(() => {
    if (isSponsorLoading) return;
    if (!isSponsorLoading && sponsorData) {
      getCommunities(sponsorData.id);
    }
  }, [isSponsorLoading, sponsorData]);

  const [getUsers, { data: users, isLoading: isUsersLoading }] =
    useLazyGetUsersBySponsorIdQuery();
  const [
    getInvitations,
    { data: invitations, isLoading: isInvitationsLoading },
  ] = useLazyGetInvitationsBySponsorIdQuery();

  const [updateSponsor] = useUpdateSponsorMutation();
  const sponsorUpdate = async (sponsor: Sponsor) => {
    if (sponsor) {
      await updateSponsor({
        id: id,
        data: sponsor,
      }).unwrap();
    }
  };

  useEffect(() => {
    if (isSponsorLoading) return;
    if (!isSponsorLoading && sponsorData) {
      getUsers(sponsorData.id);
      getCommunities(sponsorData.id);
      getInvitations(sponsorData.id);
    }
  }, [sponsorData, isSponsorLoading]);

  const { data: countries = [], isLoading: isCountryOptionsLoading } =
    useGetCountriesQuery();

  const countryOptions:
    | { [key: string]: { flagCode: string; name: string; code: string } }
    | undefined = useMemo(() => {
    if (isCountryOptionsLoading) return undefined;
    if (!isCountryOptionsLoading && countries) {
      const typeCountry: {
        [key: string]: { flagCode: string; name: string; code: string };
      } = countries.reduce((options, country) => {
        return {
          ...options,
          [country.id]: {
            flagCode: country.flagCode,
            name: country.name,
            code: country.code,
          },
        };
      }, {});
      return typeCountry;
    }
  }, [isCountryOptionsLoading, JSON.stringify(countries)]);

  return (
    <div>
      {isSponsorLoading ? (
        <div className="flex-1 flex items-center justify-center h-screen">
          <div className="grid grid-rows-2 justify-items-center px-5 py-5 shadow-md rounded-md bg-white w-fit h-28">
            <Spinner />
            <h6 className="text-sm leading-5 font-normal">Loading Sponsor</h6>
          </div>
        </div>
      ) : (
        <div className="flex flex-1 flex-col items-start justify-start bg-gray-50 w-full h-screen">
          <Head>
            <title>Bmatch - dev</title>
            <meta name="description" content="Generated by create next app" />
            <link rel="icon" href="/favicon.ico" />
          </Head>
          {sponsorData && communities && communities.length >= 0 ? (
            <div className="w-full pt-4 flex flex-col flex-1">
              <div className="flex px-8 justify-between h-10">
                <div className="flex items-end w-full space-x-3">
                  <h1 className="text-xl leading-8 font-semibold">
                    {sponsorData?.commercialName}
                  </h1>
                  <div className="flex text-sm text-gray-500 leading-8 font-semibold space-x-2">
                    <div>
                      {sponsorData && countryOptions
                        ? countryOptions[sponsorData.countryId].code
                        : ""}
                    </div>
                    <div>
                      {" "}
                      {sponsorData && countryOptions
                        ? countryOptions[sponsorData.countryId].flagCode
                        : ""}
                    </div>
                  </div>
                </div>
              </div>
              <div className="space-x-7 px-8 border-b border-gray-100">
                <Tab
                  href={"#"}
                  label="Users"
                  selectTab={currentTab.toString()}
                  onClick={() => setCurrentTab("Users")}
                />
                <Tab
                  href={"#"}
                  label="Communities"
                  selectTab={currentTab.toString()}
                  onClick={() => setCurrentTab("Communities")}
                />
                <Tab
                  href={"#"}
                  label="Sponsor data"
                  selectTab={currentTab.toString()}
                  onClick={() => setCurrentTab("Sponsor data")}
                />
              </div>
              {currentTab.toString() == "Users" && users && invitations && (
                <div className="flex flex-col space-y-6">
                  <div>
                    <UsersTable
                      data={users}
                      isLoading={isUsersLoading}
                      sponsor={sponsorData}
                    />
                  </div>
                  <div>
                    <PendingInvitationTable
                      data={invitations.filter(
                        (inv) => inv.isConsumed == false
                      )}
                      isLoading={isInvitationsLoading}
                      sponsor={sponsorData}
                      communities={communities}
                    />
                  </div>
                </div>
              )}
              {currentTab.toString() == "Communities" && communities && (
                <h3 className="sm:col-span-6 text-base leading-6 font-medium text-gray-900">
                  <CommunitiesTable
                    data={communities}
                    isLoading={isCommunitiesLoading}
                    sponsor={sponsorData}
                  />
                </h3>
              )}
              {currentTab.toString() == "Rewards" && (
                <div className="mt-6 px-8 grid grid-cols-1 sm:grid-cols-6 gap-y-6 gap-x-4">
                  <h3 className="sm:col-span-6 text-base leading-6 font-medium text-gray-900">
                    Rewards
                  </h3>
                </div>
              )}
              {currentTab.toString() == "Billing" && (
                <div className="mt-6 px-8 grid grid-cols-1 sm:grid-cols-6 gap-y-6 gap-x-4">
                  <h3 className="sm:col-span-6 text-base leading-6 font-medium text-gray-900">
                    Billing
                  </h3>
                </div>
              )}
              {currentTab.toString() == "Sponsor data" && (
                <div>
                  <DetailSponsorForm
                    sponsor={sponsorData}
                    onSubmitSponsor={sponsorUpdate}
                  />
                </div>
              )}
            </div>
          ) : (
            <LoadingBar />
          )}
        </div>
      )}
    </div>
  );
}

SponsorIdPage.getLayout = (page: JSX.Element) => {
  return <Layout>{page}</Layout>;
};
